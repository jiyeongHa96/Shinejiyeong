<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
		
    <!-- 
    	  스캔대상 클래스 범위 지정하기 
		 DAO, SERVICE의 인터페이스를 구현하는 클래스에 @Component를 기재해주면 된다. 
		  다만, Controller, Service 클래스에는 이미 @Controller 라는 Annotation이 있으므로 등록하지 않아도 된다. 
		 @Controller, @Service가 이미 @Component를 상속하기 있기 때문이다.
		  이렇게 간단한 작업으로 번거로운 클래스의 xml등록은 생략될 수 있다. 
		  
		 @Controller 는 클라이언트로부터 전달되어진 데이터를 가공하기 위한 Controller임을 명시하며
		 @RequestMapping 을 통해 경로 설정을 하게 된다.

		 @Bean의 경우 개발자가 컨트롤이 불가능한 외부 라이브러리들을 Bean으로 등록하고 싶은 경우에 사용된다.
		 반대로 개발자가 직접 컨트롤이 가능한 Class들의 경우엔 @Component를 사용한다. 
		 
		@Component(@Controller, @Service, @Repository)
		servlet.xml 에서 언급했던 콤포넌트 어노테이션 스캔에서 해당 클래스를 Bean Object 화 시켜준다.
		괄호안의 세가지 어노테이션은 모두 @Component 와 동일한 동작을 하며, 가독성을 높이기 위함이다.

		@Autowired
		스프링 컨테이너가 해당 객체의 클래스를 확인하여 자동으로 Dependency Injection을 시켜준다

		@RequestMapping
		마찬가지로 servlet.xml에서 언급했던 접근 URL경로 지정에 사용된다

		@RequestAttribute
		Spring 4.3 버전부터 추가된 어노테이션. HttpRequest 영역의 Attribute를 메서드의 Argument로 받아올 수 있다. 메서드 내부에서 형변환을 시켜주는 과정이 생략될 수 있으며, 가독성이 증가한다.

	-->
    <context:component-scan base-package="com.SkyBlue" />
 
	<!--   
		 annotation을 이용하여 컨트롤러를 구현할 때는 요청 URL매핑을 @RequestMapping 어노테이션을 이용하여 설정한다.
		 @RequestMapping annotation을 처리하기 위해서 RequestMappingHandlerMapping 을 등록한다.
	-->
    <bean id="requestMappingHandlerMapping"
          class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
        <property name="alwaysUseFullPath" value="false"/>
        <property name="interceptors">
            <list>
                <ref bean="xplatformInterceptor"/>
            </list>
        </property>
    </bean>

    <bean id="xplatformInterceptor" class="com.SkyBlue.common.interceptor.XplatformInterceptor"/>
    <bean id="viewMapping" class="com.SkyBlue.common.viewResolver.XplatformViewResolver" /> 
</beans>
