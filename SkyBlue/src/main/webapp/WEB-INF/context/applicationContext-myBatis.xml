<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- properties 파일 읽어오기 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          p:location="classpath:/jdbc.properties"/>

    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@insa-oracle11g.cdifm6un92ox.ap-northeast-2.rds.amazonaws.com:1521:ORCL" />
		<property name="username" value="admin" />
		<property name="password" value="00001111" />
		<property name="maxTotal" value="20" />
		<property name="maxIdle" value="10" />
		<property name="maxWaitMillis" value="-1" />	
    </bean>
    
    


    <!-- 트랜잭션 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="dataSource"/>
    </bean>


    <!--  트랜잭션 어노테이션 스캔  @Transactional
    	 Optional Default = transaction-manager = transactionManager 이기에 생략하였다. -->
    <tx:annotation-driven/>



    <!-- myBatis 설정 -->
    <!-- SqlSessionFactory는 JDBC DataSource의 필수 프로퍼티가 필요하다.
		  어떤 DataSource라도 상관없고 다른 스프링 데이터베이스 연결처럼 설정되어야만 한다.
 		  하나의 공통적인 프로퍼티는 마이바티스 XML설정파일의 위치를 지정하기 위해 사용되는 configLocation이다.
 		  이 프로퍼티를 설정하는 것은 디폴트 설정을 가진 마이바티스 설정을 변경해야 할 경우 뿐이다. 
 		  대개는 <settings>과 <typeAliases> 섹션을 변경하는 경우이다.
                   설정파일이 마이바티스 설정을 완전히 다룰 필요는 없다. 어떤 환경, 어떤 데이터소스 그리고 마이바티스 트랜잭션 관리자가 무시될수도 있다. 
         SqlSessionFactoryBean 는 필요에 따라 이 값들을 설정하여 자체적인 MyBatis Environment 를 만든다.
                   설정파일이 필요한 다른 이유는 마이바티스 XML파일이 매퍼 클래스와 동일한 클래스패스에 있지 않은 경우이다. 
                   이 설정을 사용하면 두가지 옵션이 있다. 
                   첫번째는 마이바티스 설정파일에 <mappers> 섹션을 사용해서 XML파일의 클래스패스를 지정하는 것이다. 
                   두번째는 팩토리 빈의 mapperLocations 프로퍼티를 사용하는 것이다.
         mapperLocations 프로퍼티는 매퍼에 관련된 자원의 위치를 나열한다. 
                   이 프로퍼티는 마이바티스의 XML매퍼 파일들의 위치를 지정하기 위해 사용될 수 있다. 
                   디렉터리 아래 모든 파일을 로드하기 위해 앤트(Ant) 스타일의 패턴을 사용할수도 있고 가장 상위 위치를 지정하는 것으로 재귀적으로 하위 경로를 찾도록 할수도 있다.
                   기존의 iBatis에서 sqlMap**XML에서 빈즈를 관리하던 typeAlias를 myBatisConfig.xml 에서 관리할수있게되었다.-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:sqlMap/**/*Mapper.xml"/>
        <property name="configLocation" value="classpath:myBatisConfig.xml"/>
    </bean>
    
    <!--  컴포넌트 스캔을 통하여 Mapper을 찾기 위한 설정.
    	 IBATA와 MyBatis의 차이점을 보자면 가장 큰 부분은 퀴리를 호출하는 방식이다. 
    	  기존 IBATIS의 경우 xml의 sqlId를 문자열로 정의하여 호출하였지만 Mybatis의 경우 Mapper 인터페이스를 만들어 호출하는 방식을 사용한다.-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.SkyBlue.**.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    

</beans>
